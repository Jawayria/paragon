{"version":3,"sources":["webpack:///./src/pages/foundations/colors.jsx"],"names":["utilityClasses","color","level","colors","themeName","unusedLevels","levels","use","selectorColors","cssSelectors","data","allCssUtilityClasses","nodes","Object","keys","length","forEach","selector","declarationFragments","declarations","split","title","map","className","classNames","includes","style","lineHeight","fontSize","element","flexBasis","query"],"mappings":"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","file":"component---src-pages-foundations-colors-jsx-2b5132537f4cfc1fc52a.js","sourcesContent":["import React from 'react';\nimport { graphql } from 'gatsby';\nimport classNames from 'classnames';\nimport SEO from '../../components/seo';\n\nconst utilityClasses = {\n  bg: (color, level) => (level ? `bg-${color}-${level}` : `bg-${color}`),\n  border: (color, level) => (level ? `border-${color}-${level}` : `border-${color}`),\n  text: (color, level) => (level ? `text-${color}-${level}` : `text-${color}`),\n};\n\nconst colors = [\n  { themeName: 'gray', color: 'gray', unusedLevels: [] },\n  { themeName: 'primary', color: 'blue', unusedLevels: [] },\n  { themeName: 'success', color: 'green', unusedLevels: [] },\n  { themeName: 'info', color: 'teal', unusedLevels: [] },\n  { themeName: 'danger', color: 'red', unusedLevels: [] },\n  { themeName: 'warning', color: 'yellow', unusedLevels: [500, 700, 900] },\n];\n\nconst levels = [\n  { level: 100, use: 'Backgrounds' },\n  { level: 200, use: 'Borders & Lines' },\n  { level: 300, use: 'Icons & Semantic State' },\n  { level: 500, use: 'Lighter Text & Element Fills' },\n  { level: 700, use: 'Regular Text & Hover State' },\n  { level: 900, use: 'Darker Text & Active State' },\n];\n\nconst selectorColors = {};\n\nfunction parseColors(cssSelectors) {\n  const colorsAreParsed = Object.keys(selectorColors).length !== 0;\n  if (colorsAreParsed) return;\n\n  cssSelectors.forEach(({ selector, declarations }) => {\n    // All declarations fit this shape: \"background-color: #fff !important;\"\n    const declarationFragments = declarations[0].split(' ');\n    selectorColors[selector] = declarationFragments.length ? declarationFragments[1] : null;\n  });\n}\n\n// eslint-disable-next-line react/prop-types\nexport default function ({ data }) {\n  parseColors(data.allCssUtilityClasses.nodes);\n\n  return (\n    <div>\n\n      <SEO title=\"Colors\" />\n\n      <h1>Colors</h1>\n\n      <h3>Palette</h3>\n\n      <p>\n        Below is an exhaustive set of UI colors. Colors for brands,\n        illustrations, or graphics are not included.\n      </p>\n\n      {levels.map(({ level, use }) => (\n        <div>\n          <h6 className=\"text-muted text-uppercase mb-3 font-weight-normal\">\n            <strong className=\"mr-2\">{level}</strong> {use}\n          </h6>\n          <div className=\"d-flex\">\n            {colors.map(({ themeName, unusedLevels }) => (\n              <div className=\"mr-3 mb-4 w-100\">\n                <div\n                  className={classNames(\n                    'pgn-doc__swatch',\n                    utilityClasses.bg(themeName, level),\n                    {\n                      'unused-level': unusedLevels.includes(level),\n                    },\n                  )}\n                />\n                {unusedLevels.includes(level) ? null : (\n                  <div style={{ lineHeight: 1 }} className=\"mt-1\">\n                    <code className=\"mb-0 d-flex justify-content-between text-lowercase text-gray-700\">\n                      <span>{themeName}</span>\n                      <span>{level}</span>\n                    </code>\n                    <code\n                      style={{ fontSize: '65%' }}\n                      className=\"text-black-50 text-lowercase\"\n                    >\n                      {selectorColors[utilityClasses.bg(themeName, level)]}\n                    </code>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n      ))}\n\n\n      <h3>SCSS Color Usage</h3>\n      <p>\n        Include these colors in scss files using the mixin.\n      </p>\n\n      <code className=\"d-block mb-4 lead bg-gray-100 p-3\">\n        theme-color($color-name, $variant)\n      </code>\n\n      <table className=\"table pgn-doc__table\">\n        <tbody>\n          <tr>\n            <td>\n              <strong>Color Name</strong><br />\n              A theme color\n            </td>\n            <td>\n              {colors.map(({ themeName }) => <code className=\"mr-2\">{themeName}</code>)}\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <strong>Variant</strong><br />\n              <p>A number level or element type</p>\n            </td>\n            <td>\n              <strong className=\"d-block\">Levels </strong>\n              {levels.map(({ level }) => <code className=\"mr-2\">{level}</code>)}\n              <br />\n              <strong className=\"d-block\">Element types </strong>\n              {[\n                'background', 'disabled-border', 'border', 'icon', 'active-border', 'focus',\n                'graphic', 'default', 'light-text', 'hover', 'text', 'active', 'dark-text',\n              ].map(element => <code className=\"mr-2\">{element}</code>)}\n            </td>\n          </tr>\n        </tbody>\n      </table>\n\n      <h6>Example</h6>\n      <code className=\"d-block mb-2 bg-gray-100 p-3\">\n        border: solid 1px <strong>theme-color(&ldquo;gray&rdquo;, &ldquo;border&rdquo;)</strong>;\n      </code>\n\n      <code className=\"d-block mb-4 bg-gray-100 p-3\">\n        border: solid 1px <strong>theme-color(&ldquo;gray&rdquo;, 300)</strong>;\n      </code>\n\n      <h3>CSS Class Utilties</h3>\n      <p>Utility classes for backgrounds, borders, and text colors follow the format below:</p>\n      <p><code>{'.{use}-{color}-{level}'}</code></p>\n      <table className=\"table w-50\">\n        <thead>\n          <tr>\n            <th>Use</th>\n            <th>Color</th>\n            <th>Level</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td className=\"align-top pr-4\">\n              <code>bg-</code><br />\n              <code>border-</code><br />\n              <code>text-</code><br />\n            </td>\n            <td className=\"align-top pr-4\">\n              {colors.map(({ themeName }) => <code className=\"d-block\">{themeName}-</code>)}\n            </td>\n            <td className=\"align-top pr-4\">\n              {levels.map(({ level }) => <code className=\"d-block\">{level}</code>)}\n            </td>\n          </tr>\n        </tbody>\n      </table>\n\n\n      <h3>Background Fills</h3>\n      <div className=\"d-flex flex-wrap\">\n        {colors.map(({ themeName }) => (\n          <div style={{ flexBasis: '33%' }}>\n            <div className=\"mr-3 mb-3\">\n              <div className={classNames('p-3 rounded', utilityClasses.bg(themeName, 100))}>\n                <code style={{ color: 'inherit' }}>.{utilityClasses.bg(themeName, 100)}</code>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n\n      <h3>Borders & Lines</h3>\n      <div className=\"d-flex flex-wrap\">\n        {colors.map(({ themeName }) => (\n          <div style={{ flexBasis: '33%' }}>\n            <div className=\"mr-3 mb-3\">\n              <div\n                className={classNames('p-3 rounded border', utilityClasses.border(themeName, 200))}\n              >\n                <code style={{ color: 'inherit' }}>.{utilityClasses.border(themeName, 200)}</code>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n\n      <h3>Icons & Semantic Lines</h3>\n      <div className=\"d-flex flex-wrap\">\n        {colors.map(({ themeName }) => (\n          <div style={{ flexBasis: '33%' }}>\n            <div className=\"mr-3 mb-3\">\n              <div\n                className={classNames('p-3 rounded border', utilityClasses.border(themeName, 300))}\n              >\n                <code style={{ color: 'inherit' }}>.{utilityClasses.border(themeName, 300)}</code>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      <h3>Text</h3>\n      <p>Color levels 500 and above are accessible on white and 100 level backgrounds.</p>\n      <div className=\"d-flex rounded overflow-hidden mb-3\">\n        <h6 className=\"mb-0 w-100\">Lighter Text</h6>\n        <h6 className=\"mb-0 w-100\">Regular Text</h6>\n        <h6 className=\"mb-0 w-100\">Darker Text</h6>\n      </div>\n      <div className=\"d-flex\">\n        {[500, 700, 900].map(level => (\n          <div style={{ flexBasis: '33%' }}>\n            {colors.map(({ themeName, unusedLevels }) => {\n              if (unusedLevels.includes(level)) return null;\n              return (\n                <code\n                  className={classNames(\n                    'd-block',\n                    utilityClasses.text(themeName, level),\n                  )}\n                >\n                  .{utilityClasses.text(themeName, level)}\n                </code>\n              );\n            })}\n          </div>\n        ))}\n      </div>\n\n      <h3>Element Fills</h3>\n      <p>Buttons or other interactive elements.</p>\n      <div>\n        <div className=\"d-flex rounded overflow-hidden mb-3\">\n          <div className=\"w-100\">\n            <h6 className=\"mb-0\">Default State</h6>\n          </div>\n          <div className=\"w-100\">\n            <h6 className=\"mb-0\">Hover State</h6>\n          </div>\n          <div className=\"w-100\">\n            <h6 className=\"mb-0\">Active State</h6>\n          </div>\n        </div>\n        {colors.map(({ themeName }) => {\n          if (themeName === 'warning') return null;\n          return (\n            <div className=\"d-flex rounded overflow-hidden mb-3\">\n              <div\n                className={classNames(\n                  'p-3 w-100',\n                  utilityClasses.bg(themeName, 500),\n                  {\n                    'text-white': themeName !== 'light',\n                  },\n                )}\n              >\n                <code style={{ color: 'inherit' }}>.{utilityClasses.bg(themeName, 500)}</code>\n              </div>\n              <div\n                className={classNames(\n                  'p-3 w-100',\n                  utilityClasses.bg(themeName, 700),\n                  {\n                    'text-white': themeName !== 'light',\n                  },\n                )}\n              >\n                <code style={{ color: 'inherit' }}>.{utilityClasses.bg(themeName, 700)}</code>\n              </div>\n              <div\n                className={classNames(\n                  'p-3 w-100',\n                  utilityClasses.bg(themeName, 900),\n                  {\n                    'text-white': themeName !== 'light',\n                  },\n                )}\n              >\n                <code style={{ color: 'inherit' }}>.{utilityClasses.bg(themeName, 900)}</code>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\n\nexport const query = graphql`\n{\n  allCssUtilityClasses(\n    filter: {declarations: {regex: \"/color/\"}, isUtility: {eq: true}},\n    sort: {fields: selector, order: ASC}\n  ) {\n    nodes {\n      selector\n      declarations\n    }\n    distinct(field: selector)\n  }\n}\n`;\n"],"sourceRoot":""}